package com.example.module9;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;


/**
 * A JavaFX application for analyzing word occurrences in a text file.
 */
public class textanalyzer extends Application {
    private TextArea textArea;
    private final ListView<String> listView = new ListView<>();
    /**
     * The entry point for launching the JavaFX application.
     *
     * @param args command-line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Word Occurrences");

        // Text area for displaying the file content
        textArea = new TextArea();
        textArea.setEditable(false);



        // Open file button
        Button openFileButton = new Button("Open File");
        openFileButton.setOnAction(e -> openFile());

        // Analyze button
        Button analyzeButton = new Button("Analyze");
        analyzeButton.setOnAction(e -> analyzeText());

        // Create the top pane with buttons
        VBox buttonPane = new VBox(10, openFileButton, analyzeButton);
        buttonPane.setPadding(new Insets(10));

        // Create the main layout pane
        BorderPane layout = new BorderPane();
        layout.setTop(buttonPane);
        layout.setLeft(textArea);
        layout.setRight(listView);

        // Create the scene
        Scene scene = new Scene(layout, 800, 600);

        // Set the scene and show the stage
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * Opens a file chooser dialog to select a text file and displays its content in the text area.
     */
    private void openFile() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Open Text File");
        File file = fileChooser.showOpenDialog(null);
        if (file != null) {
            String fileContent = readFile(file);
            textArea.setText(fileContent);
        }
    }

    /**
     * Reads the content of a text file.
     *
     * @param file the file to read
     * @return the content of the file as a string
     */
    private String readFile(File file) {
        StringBuilder fileContent = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                fileContent.append(line).append("\n");
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return fileContent.toString();

    }

    /**
     * Analyzes the text in the text area and displays the word occurrences in the list view.
     */
    private void analyzeText() {
        String text = textArea.getText();
        String[] words = text.split("\\W+");

        Map<String, Integer> wordFrequencies = new HashMap<>();
        for (String word : words) {
            word = word.toLowerCase();
            int frequency = wordFrequencies.getOrDefault(word, 0);
            wordFrequencies.put(word, frequency + 1);
        }

        Map<String, Integer> sortedFrequencies = wordFrequencies.entrySet()
                .stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .limit(20)
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldValue, newValue) -> oldValue, TreeMap::new));

        ObservableList<String> items = FXCollections.observableArrayList();
        for (Map.Entry<String, Integer> entry : sortedFrequencies.entrySet()) {
            String word = entry.getKey();
            int frequency = entry.getValue();
            items.add(word + ": " + frequency);
        }

        listView.setItems(items);
    }
}

